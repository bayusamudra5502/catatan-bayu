{"version":3,"file":"component---src-templates-blog-post-js-e45720108237934ce935.js","mappings":"iKAoDA,IAzCY,WAAO,IAAD,EAkBVA,EAAM,WAjBCC,EAAAA,EAAAA,gBAAe,cAiBRC,KAAKC,oBAAb,aAAG,EAAwBH,OAEvC,OACE,uBAAKI,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,gCACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,uBAUCZ,MAAAA,OAAA,EAAAA,EAAQa,OACP,qDAC2B,8BAASb,EAAOa,MAD3C,MAC4Db,MAAAA,OAAA,EAAAA,EAAQc,UAAW,S,kICzCxE,SAASC,EAAT,GAA2C,IAAD,EAAnBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UAcpCjB,EAAM,WAbCC,EAAAA,EAAAA,gBAAe,cAaRC,KAAKC,oBAAb,aAAG,EAAwBH,OAEvC,OACE,uBAAKI,UAAU,gBACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,gCACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,sBAUA,2BACE,qBAAGR,UAAU,UAAUJ,EAAOa,MAC9B,yBAAI,IAAIK,KAAKC,eAAe,KAAM,CAAEC,UAAW,SAAUC,OAAO,IAAIC,KAAKN,IAAzE,MAAoFO,KAAKC,KAAKP,EAAY,KAA1G,YC1BR,IAuEA,EAvEyB,SAAC,GAAwB,IAAD,IAArBQ,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKvB,KAAKC,oBAAV,eAAwB2B,QAAxB,QACVC,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KACZC,EAAUN,EAAKO,YAAYD,QAEjC,OACE,gBAAC,IAAD,CAAQP,SAAUA,EAAUI,MAAOD,EAAWM,IAAKF,GACjD,gBAAC,IAAD,CACEH,MAAOH,EAAKO,YAAYJ,MACxBM,YAAaT,EAAKO,YAAYE,aAAeT,EAAKU,UAEpD,2BACEjC,UAAU,YACVkC,WAAS,EACTC,SAAS,6BAET,8BAEI,UAAAZ,EAAKO,mBAAL,SAAkBM,KAChB,uBAAKpC,UAAU,gBACZuB,EAAKO,YAAYM,MAElB,KAEN,sBAAIpC,UAAU,QAAQqC,SAAS,YAAYd,EAAKO,YAAYJ,OAC5D,qBAAG1B,UAAU,YAAYuB,EAAKO,YAAYQ,UAC1C,gBAAC3B,EAAD,CAAaC,KAAMW,EAAKO,YAAYlB,KAAMC,UAAWU,EAAKV,UAAU0B,SAEtE,2BACEC,wBAAyB,CAAEC,OAAQlB,EAAKmB,MACxCL,SAAS,gBAGX,8BACE,sBAAIrC,UAAU,UAAd,mBAGA,gBAAC,IAAD,QAGJ,uBAAKA,UAAU,iBACb,sBACE2C,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGrB,GACC,gBAAC,EAAAsB,KAAD,CAAMC,GAAIvB,EAASwB,OAAOC,KAAMC,IAAI,QAApC,KACK1B,EAASG,YAAYJ,QAI9B,0BACGE,GACC,gBAAC,EAAAqB,KAAD,CAAMC,GAAItB,EAAKuB,OAAOC,KAAMC,IAAI,QAC7BzB,EAAKE,YAAYJ,MADpB,Y","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/ArticleData.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\n        src=\"../images/profile-picture.jpg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Halaman ini ditulis oleh <strong>{author.name}</strong>, {author?.summary || null}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from 'react'\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport default function ArticleData({ date, wordCount }) {\n  const data = useStaticQuery(graphql`\n    query ArticleBioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"article-data\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\n        src=\"../images/profile-picture.jpg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      <div>\n        <p className=\"author\">{author.name}</p>\n        <p>{new Intl.DateTimeFormat(\"id\", { dateStyle: \"long\" }).format(new Date(date))} • {Math.ceil(wordCount / 200)} menit</p>\n      </div>\n    </div>\n  )\n}\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport ArticleData from \"../components/ArticleData\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n  const picture = post.frontmatter.picture\n\n  return (\n    <Layout location={location} title={siteTitle} img={picture}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          {\n            post.frontmatter?.icon ? (\n              <div className=\"article-icon\">\n                {post.frontmatter.icon}\n              </div>\n            ) : null\n          }\n          <h1 className=\"title\" itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p className=\"subtitle\">{post.frontmatter.subtitle}</p>\n          <ArticleData date={post.frontmatter.date} wordCount={post.wordCount.words} />\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n\n        <footer>\n          <h1 className=\"author\">\n            Tentang Penulis\n          </h1>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"DD MMMM YYYY\")\n        description\n        icon\n        subtitle\n        picture {\n          childImageSharp {\n            gatsbyImageData(\n              placeholder: BLURRED\n              formats: [AUTO, WEBP, AVIF]\n           )\n          }\n        }\n      }\n      wordCount{\n        words\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["author","useStaticQuery","site","siteMetadata","className","S","layout","formats","src","width","height","quality","alt","name","summary","ArticleData","date","wordCount","Intl","DateTimeFormat","dateStyle","format","Date","Math","ceil","data","location","post","markdownRemark","siteTitle","title","previous","next","picture","frontmatter","img","description","excerpt","itemScope","itemType","icon","itemProp","subtitle","words","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}